FROM golang:1.21-alpine AS builder

# 依存関係のためのパッケージをインストール（最小限に）
RUN apk add --no-cache git

# 作業ディレクトリを設定
WORKDIR /app

# Go環境変数の設定（メモリ使用量を抑制）
ENV GOGC=20
ENV CGO_ENABLED=0 
ENV GOOS=linux
ENV GOARCH=amd64
ENV GO111MODULE=on

# ソースコード全体をコピー
COPY . .

# 依存関係を解決
RUN go mod tidy && go mod download && go mod verify

# メモリ使用量を抑えてビルド実行
RUN go build -ldflags="-w -s" -o app ./cmd/app/main.go

# 最終イメージを小さくするためのマルチステージビルド
FROM alpine:3.16

# 必要なパッケージをインストール
RUN apk --no-cache add ca-certificates tzdata && \
    update-ca-certificates

# タイムゾーンを設定
ENV TZ=Asia/Tokyo

# ビルドしたバイナリをコピー
COPY --from=builder /app/app /app/app

# 設定ファイルとスクリプトをコピー
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# アップロードディレクトリ構造を作成して権限を設定
RUN mkdir -p /app/uploads/files /app/uploads/thumbnails && \
    chmod -R 755 /app/uploads

# 作業ディレクトリを設定
WORKDIR /app

# 環境変数を設定（デフォルト値）
ENV SERVER_PORT=8080 \
    UPLOAD_DIR=/app/uploads \
    GIN_MODE=release

# ヘルスチェック設定
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# ポートを公開
EXPOSE 8080

# 非rootユーザーに切り替え
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
RUN chown -R appuser:appgroup /app
USER appuser

# エントリーポイントを設定
ENTRYPOINT ["docker-entrypoint.sh"]

# アプリケーションを実行
CMD ["/app/app"]